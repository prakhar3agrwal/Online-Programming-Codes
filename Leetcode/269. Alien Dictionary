https://leetcode.com/problems/alien-dictionary/

class Solution {
    public String alienOrder(String[] words) {
        int n = words.length;
        
        Map<Character, Integer> charIncomingEdgeCt = new HashMap<>();
        Map<Character, List<Character>> graph = new HashMap<>();
        
        //All chars
        for(int i=0;i<n;i++){
            for (char c: words[i].toCharArray()){
                charIncomingEdgeCt.put(c,0);
            }
        }
        
        //Graph construction
        
        for(int i=0;i<n-1;i++){
            String word1 = words[i];
            String word2 = words[i+1];
            
            if(word2.startsWith(word1)){
                continue;
            }
            if(word1.length()>word2.length() && word1.startsWith(word2)){
                return "";
            }
            for(int j=0;j<Math.min(word1.length(),word2.length());j++){
                if(word1.charAt(j) != word2.charAt(j)){
                    List<Character> list = graph.getOrDefault(word1.charAt(j), new ArrayList<>());
                    list.add(word2.charAt(j));
                    graph.put(word1.charAt(j),list);
                    
                    charIncomingEdgeCt.put(word2.charAt(j), charIncomingEdgeCt.getOrDefault(word2.charAt(j),0)+1);
                    break;
                }
            }
        }
        
        StringBuilder ans  = new StringBuilder();
        Queue<Character> q = new LinkedList<>();
        
        for(Character c: charIncomingEdgeCt.keySet()){
            if(charIncomingEdgeCt.get(c) == 0){
                q.add(c);
            }
        }
        
        while(!q.isEmpty()){
            Character currChar = q.remove();
            ans.append(currChar);
            List<Character> list = graph.getOrDefault(currChar, new ArrayList<>());
            
            for(Character currNeighbour: list){
                charIncomingEdgeCt.put(currNeighbour, charIncomingEdgeCt.getOrDefault(currNeighbour,0)-1);
                if(charIncomingEdgeCt.get(currNeighbour)==0){
                    q.add(currNeighbour);
                }
            }
        }
        if(ans.length()!=charIncomingEdgeCt.size()){
            return "";
        }
        return ans.toString();
    }
}
