https://leetcode.com/problems/rotting-oranges

class Solution {
    
    class Node{
        int row;
        int col;
        int dist;
        public Node(int row, int col, int dist){
            this.row = row;
            this.col = col;
            this.dist = dist;
        }
    }
    
    int[] rowOffset = {1,-1,0,0};
    int[] colOffset = {0,0,-1,1};
    
    private boolean isValid(int row, int col, int m, int n){
        if(row<0 || row>m-1 || col <0 || col>n-1){
            return false;
        }
        return true;
    }

    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int ans = 0;
        int freshOranges = 0;
        Queue<Node> q = new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 2){
                    q.offer(new Node(i,j,0));
                }else if(grid[i][j] ==1){
                    freshOranges++;
                }
            }
        }

        while(!q.isEmpty()){
            Node currNode = q.poll();
            int currRow = currNode.row;
            int currCol = currNode.col;
            int currDist = currNode.dist;
            ans = Math.max(ans, currDist);
            
            for(int i=0;i<4;i++){
                int newRow = currRow + rowOffset[i];
                int newCol = currCol + colOffset[i];
                if(isValid(newRow, newCol,m,n) && grid[newRow][newCol] ==1){
                    freshOranges--;
                    q.offer(new Node(newRow, newCol, currDist+1));
                    grid[newRow][newCol] = 0;
                }
            }
            
        }
        if(freshOranges!=0){
            ans = -1;
        }
        return ans;
    }
}
