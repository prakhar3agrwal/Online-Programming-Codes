https://leetcode.com/problems/out-of-boundary-paths

class Solution {
    
    int[][][] dp = null;
    int mod = 1000000007;
    private int solve(int m, int n, int maxMove, int row, int col){
        if(row<0 || row==m || col<0 || col==n){
            return 1;
        }    
        if(maxMove == 0){
            return 0;
        }
        if(dp[row][col][maxMove] >= 0){
            return dp[row][col][maxMove];
        }
        return dp[row][col][maxMove] = (
            (solve(m,n,maxMove-1, row-1, col)%mod +
            solve(m,n,maxMove-1, row+1, col)%mod)%mod +
            (solve(m,n,maxMove-1, row, col-1)%mod +
            solve(m,n,maxMove-1, row, col+1))%mod)%mod;
    }
    
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        if(maxMove == 0){
            return 0;
        }
        dp = new int[m][n][maxMove+1];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        return solve(m,n,maxMove, startRow, startColumn);
 
    }
}
