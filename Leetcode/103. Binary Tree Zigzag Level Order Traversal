https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList();
        if(root == null){
            return ans;
        }
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        s1.add(root);
        while(!s1.isEmpty() || !s2.isEmpty()){
            List<Integer> currList = new ArrayList<>();
            while(!s1.isEmpty()){
                TreeNode node = s1.pop();
                currList.add(node.val);
                if(node.left!=null){
                    s2.add(node.left);
                }
                if(node.right!=null){
                    s2.add(node.right);
                }
            }
            if(!currList.isEmpty()){
                ans.add(currList);    
            }
            
            currList = new ArrayList<>();
            while(!s2.isEmpty()){
                TreeNode node = s2.pop();
                currList.add(node.val);
                if(node.right!=null){
                    s1.add(node.right);
                }
                if(node.left!=null){
                    s1.add(node.left);
                }
            }
            if(!currList.isEmpty()){
                ans.add(currList);    
            }
            
        }
        return ans;
    }
    
}
