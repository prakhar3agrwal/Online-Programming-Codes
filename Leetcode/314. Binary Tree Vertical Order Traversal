https://leetcode.com/problems/binary-tree-vertical-order-traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    TreeMap<Integer, List<Pair<Integer, Integer>>> map = new TreeMap<>();
    private void preOrder(TreeNode root, int col, int row){
        if(root == null){
            return;
        }
        List<Pair<Integer, Integer>> list = map.getOrDefault(col, new ArrayList<>());
        list.add(new Pair(row, root.val));
        map.put(col, list);
        preOrder(root.left, col-1, row+1);
        preOrder(root.right, col+1, row+1);
    }
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        preOrder(root, 0,0);
        
        for(Integer i: map.keySet()){
            List<Pair<Integer, Integer>> list = map.get(i);
            Collections.sort(list, (a,b)->{
                return (a.getKey()-b.getKey());
            });
            int n = list.size();
            List<Integer> temp = new ArrayList<>();
            for(int j=0;j<n;j++){
                temp.add(list.get(j).getValue());
            }
            ans.add(temp);
        }
        return ans;
    }
}
