https://leetcode.com/problems/find-all-the-lonely-nodes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private boolean isLonely(TreeNode root){
        if(root == null){
            return false;
        }
        if (root.left != null && root.right != null){
            return false;
        }
        return (root.left == null || root.right == null);
    }
    private void helper(TreeNode root, List<Integer> list){
        if(root == null){
            return;
        }    
        if(isLonely(root)){
            if(root.left!=null)
                list.add(root.left.val);
            else if(root.right!=null)
                list.add(root.right.val);
        }
        helper(root.left, list);
        helper(root.right, list);
    }
    
    public List<Integer> getLonelyNodes(TreeNode root) {
        List<Integer> ans = new ArrayList<Integer>();
        if(root == null){
            return ans;
        }
        helper(root,ans);
        return ans;
    }
}
