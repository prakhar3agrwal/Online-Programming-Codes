https://leetcode.com/problems/add-two-numbers-ii

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    private int getLength(ListNode list){
        int n = 0;
        while(list != null){
            n++;
            list = list.next;
        }
        return n;
    }
    
    private ListNode reverseList(ListNode list){
        ListNode curr = list;
        ListNode prev = null;
        while(curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }
        int n = getLength(l1);
        int m = getLength(l2);
        
        ListNode ans = new ListNode();
        ListNode temp = ans;
        while(n>0 && m>0){
            ListNode curr = null;
            if(n>m){
                curr = new ListNode(l1.val);
                l1 = l1.next;
                n--;
            }else if(m>n){
                curr = new ListNode(l2.val);
                l2 = l2.next;
                m--;
            }else{
                curr = new ListNode(l1.val+l2.val);
                l1 = l1.next;
                l2 = l2.next;
                n--;
                m--;
            }
            temp.next = curr;
            temp = temp.next;
        }
        ans.next = reverseList(ans.next);
        temp = ans.next;
        int carry = 0;
        ListNode prev = null;
        while(temp!=null){
            carry += temp.val;
            temp.val = carry%10;
            carry /=10;
            prev = temp;
            temp = temp.next;
        }
        if(carry>0){
            ListNode curr = new ListNode(carry);
            prev.next = curr;
        }
        return reverseList(ans.next);
    }
}
