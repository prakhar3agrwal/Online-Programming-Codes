https://leetcode.com/problems/redundant-connection/

class Solution {
    
    Map<Integer, Set<Integer>> graph = new HashMap<>();
    Set<Integer> visited = new HashSet();
    private boolean dfs(int source, int target){
        if(visited.contains(source)){
            return false;
        }
        if(source == target){
            return true;
        }
        
        visited.add(source);
        Set<Integer> set = graph.get(source);
        Iterator iterator = set.iterator();
        while(iterator.hasNext()){
            if(dfs((Integer)iterator.next(), target)){
                return true;
            }
        }
        return false;
        
    }
    
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        
        for(int i=0;i<n;i++){
            int[] edge = edges[i];
            
            Set<Integer> s1 = graph.getOrDefault(edge[0], new HashSet());
            s1.add(edge[1]);
            graph.put(edge[0],s1);
            
            Set<Integer> s2 = graph.getOrDefault(edge[1], new HashSet());
            s2.add(edge[0]);
            graph.put(edge[1],s2);
        }
        
        for(int i = n-1;i>=0;i--){
            int[] edge = edges[i];
            
            Set<Integer> s1 = graph.getOrDefault(edge[0], new HashSet());
            s1.remove(edge[1]);
            graph.put(edge[0],s1);
            
            Set<Integer> s2 = graph.getOrDefault(edge[1], new HashSet());
            s2.remove(edge[0]);
            graph.put(edge[1],s2);
        
            
            visited.clear();
            if(dfs(edge[0], edge[1])){
                return edge;
            }
            s1 = graph.getOrDefault(edge[0], new HashSet());
            s1.add(edge[1]);
            graph.put(edge[0],s1);
            
            s2 = graph.getOrDefault(edge[1], new HashSet());
            s2.add(edge[0]);
            graph.put(edge[1],s2);
        }
        return new int[]{};
    }
}
