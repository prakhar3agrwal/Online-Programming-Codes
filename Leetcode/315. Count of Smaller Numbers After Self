https://leetcode.com/problems/count-of-smaller-numbers-after-self

class Solution {
    
    private int findFirstOccurrence(List<Integer> nums, int num){
        int high = nums.size()-1;
        if(high == -1){
            return 0;
        }
        
        int low = 0;
        int mid = (low+high)/2;
        int ans  = -1;
        while(low<=high){
            if(nums.get(mid) == num){
                ans = mid;
                high = mid-1;
            }else if(nums.get(mid)>num){
                high = mid-1;
            }else{
                low = mid+1;
            }
            mid = (low+high)/2;
        }
        return ans;
    }
    
    private int searchInSortedArray(List<Integer> nums, int num){
        int low = 0;
        int high = nums.size()-1;
        int mid = (low+high)/2;
        
        int ans = 0;
        while(low<=high){
            if(nums.get(mid) < num){
                ans = mid+1;
                low = mid+1;
            }else if(nums.get(mid) > num){
                high = mid-1;
            }
            mid = (low+high)/2;
        }
        
        return ans;
    }
    
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        int n = nums.length;
        System.out.print(n);
        List<Integer> tempList = new ArrayList<>();
        for(int i=n-1;i>=0;i--){
            int index = findFirstOccurrence(tempList, nums[i]);
            if(index == -1){
                index = searchInSortedArray(tempList, nums[i]);    
            }
            ans.add(index);
            tempList.add(index, nums[i]);
        }
        Collections.reverse(ans);
        return ans;
    }
}
