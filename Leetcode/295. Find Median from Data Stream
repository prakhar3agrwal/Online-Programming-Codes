https://leetcode.com/problems/find-median-from-data-stream

class MedianFinder {

    PriorityQueue<Integer> q1 = null;
    PriorityQueue<Integer> q2 = null;
    /** initialize your data structure here. */
    public MedianFinder() {
        q2 = new PriorityQueue<>(Collections.reverseOrder());
        q1 = new PriorityQueue<>(Collections.reverseOrder());
    }
    
    public void addNum(int num) {
        int n = q1.size();
        int m = q2.size();
        
        if(n == 0){
            q1.offer(num);
            return;
        }
        if(n>m){
            q2.offer(-num);
        }else{
            q1.offer(num);
        }
        int q1Element = q1.peek();
        int q2Element = -q2.peek();
        if(q2Element<q1Element){
             q1.poll();
             q1.offer(q2Element);
             q2.poll();
             q2.offer(-q1Element);
         }
    }
    
    public double findMedian() {
        int n = q1.size();
        int m = q2.size();
        if(n>m){
            return q1.peek();
        }
        return (q1.peek() + -q2.peek())/2.0;
        
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
