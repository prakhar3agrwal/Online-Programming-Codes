https://leetcode.com/problems/shortest-distance-to-target-color

class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        List<Integer> ans = new ArrayList<>();
        int n = colors.length;
        
        int[][] dp = new int[n][4];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][colors[0]]=0;
        dp[n-1][colors[n-1]]=0;
        
        for(int i=1;i<n;i++){
            dp[i][colors[i]]=0;
            
            if(dp[i-1][1] != Integer.MAX_VALUE){
                dp[i][1] = Math.min(dp[i][1], dp[i-1][1]+1);
            }
            
            
            if(dp[i-1][2] != Integer.MAX_VALUE){
                dp[i][2] = Math.min(dp[i][2], dp[i-1][2]+1);
            }
            
            
            if(dp[i-1][3] != Integer.MAX_VALUE){
                dp[i][3] = Math.min(dp[i][3], dp[i-1][3]+1);
            }
        }
        
        for(int i=n-2;i>=0;i--){
            dp[i][colors[i]]=0;
            
            if(dp[i+1][1] != Integer.MAX_VALUE){
                dp[i][1] = Math.min(dp[i][1], dp[i+1][1]+1);
            }
            
            
            if(dp[i+1][2] != Integer.MAX_VALUE){
                dp[i][2] = Math.min(dp[i][2], dp[i+1][2]+1);
            }
            
            
            if(dp[i+1][3] != Integer.MAX_VALUE){
                dp[i][3] = Math.min(dp[i][3], dp[i+1][3]+1);
            }
        }
        
        int m = queries.length;
        for(int i=0;i<m;i++){
            int index = queries[i][0];
            int color = queries[i][1];
            if(dp[index][color]==Integer.MAX_VALUE){
                dp[index][color] = -1;
            }
            ans.add(dp[index][color]);
        }
        return ans;
    }
}
