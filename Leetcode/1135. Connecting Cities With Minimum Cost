https://leetcode.com/problems/connecting-cities-with-minimum-cost

class Solution {
    
    int[] parent = null;
    private int find(int a){
        int root = a;
        while(root!=parent[root]){
            root =parent[root];
        }
        return root;
    }
                           
    private void union(int a, int b){
        int parentA = find(a);
        int parentB = find(b);
        
        parent[parentA] = parentB;
    }
    
    public int minimumCost(int N, int[][] connections) {
        Arrays.sort(connections, (a,b)->{
            return a[2]-b[2];
        });
        int ans = 0;
        parent = new int[N+1];
        for(int i=0;i<N;i++){
            parent[i+1]=i+1;
        }
        
        int len = connections.length;
        for(int i=0;i<len;i++){
            int node1 = connections[i][0];
            int node2 = connections[i][1];
            int cost = connections[i][2];
            if(find(node1)!=find(node2)){
                union(node1, node2);
                ans += cost;
            }
        }
        int parentNode1 = find(1);
        for(int i=2;i<=N;i++){
            if(find(i) != parentNode1){
                return -1;
            }
        }
        return ans;
    }
}
