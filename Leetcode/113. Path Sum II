https://leetcode.com/problems/path-sum-ii/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> ans = new ArrayList<>();
    private boolean isLeaf(TreeNode root){
        if(root != null && root.left == null && root.right == null){
            return true;
        }
        return false;
    }
    
    private void dfs(TreeNode root, int targetSum, List<Integer> currList){
        if(root == null){
            return;
        }
        if(isLeaf(root)){
            if(targetSum == root.val){
                List<Integer> list = new ArrayList<>(currList);
                list.add(root.val);
                ans.add(list);
                return;
            }
        }
        currList.add(root.val);
        dfs(root.left, targetSum-root.val, currList);
        dfs(root.right, targetSum-root.val, currList);
        currList.remove(currList.size()-1);
    }
    
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        dfs(root, targetSum, new ArrayList<>());
        return ans;
    }
}
