https://leetcode.com/problems/find-leaves-of-binary-tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    Map<Integer, List<Integer>>mp = new TreeMap<>();
    
    private boolean isLeaf(TreeNode root){
        if(root == null){
            return false;
        }
        return ((root.left == null) && (root.right==null));
    }
    private int solve(TreeNode root){
        if(isLeaf(root)){
            List<Integer> list = mp.getOrDefault(1, new ArrayList<>());
            list.add(root.val);
            mp.put(1, list);
            return 1;
        }    
        
        int left = -1;
        if(root.left != null){
             left = solve(root.left);
        }
        int right = -1;
        if(root.right!=null){
            right = solve(root.right);
        }
        int currRootLevel = Math.max(left, right)+1;
        List<Integer> list = mp.getOrDefault(currRootLevel, new ArrayList<>());
        list.add(root.val);
        mp.put(currRootLevel, list);
        return currRootLevel;
    }
    public List<List<Integer>> findLeaves(TreeNode root) {
        solve(root);
        List<List<Integer>> ans = new ArrayList<>();
        for(Integer level: mp.keySet()){
            List<Integer> temp = new ArrayList<>();
            temp.addAll(mp.get(level));
            ans.add(temp);
        }
        return ans;
        
    }
}
