https://leetcode.com/problems/combination-sum-iii/

class Solution {
    
    Set<List<Integer>> set = new HashSet<>();
    int k = 0;
    private void solve(int[] candidates, int currIndex, LinkedList<Integer> currComb, int currTarget){
        if(0 == currTarget){
            if(currComb.size()==k){             
                set.add(new ArrayList<Integer>(currComb));     
            }
            return;
        }
        if(currComb.size()==k){
            return;
        }
        for(int i = currIndex; i<candidates.length; i++){
            if(candidates[i]>currTarget){
                break;
            }
            currComb.addLast(candidates[i]);
            solve(candidates, i+1, currComb, currTarget-candidates[i]);
            currComb.removeLast();
        }
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] candidates = new int[9];
        for(int i=0;i<9;i++){
            candidates[i] = i+1;
        }
        this.k = k;
        solve(candidates,0,new LinkedList<>(), n);
        List<List<Integer>> ans = new ArrayList<>();
        ans.addAll(set);
        return ans;
    }
}
