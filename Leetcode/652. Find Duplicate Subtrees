https://leetcode.com/problems/find-duplicate-subtrees

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<String, Integer> mp = new HashMap<>();
    List<TreeNode> ans = new ArrayList<>();
    
    private String serialize(TreeNode root){
        if(null == root){
            return "()";
        }
        String left = serialize(root.left);
        String right = serialize(root.right);
        
        String currSubTree = "(" + Integer.toString(root.val) + left + right + ")";
        int ct = mp.getOrDefault(currSubTree, 0);
        if(ct == 1){
            ans.add(root);
        }
        mp.put(currSubTree, ct+1);
        return currSubTree;
    }
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        serialize(root);
        return ans;
    }
}
