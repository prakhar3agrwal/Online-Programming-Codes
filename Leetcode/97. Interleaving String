https://leetcode.com/problems/interleaving-string/


class Solution {
    
    int[][] dp = null;
    private boolean calculate(String s1, int s1Index, String s2, int s2Index, String s3, int s3Index){
        
        if(s1Index == s1.length()){
            return s2.substring(s2Index).equals(s3.substring(s3Index));
        }
        
        if(s2Index == s2.length()){
            return s1.substring(s1Index).equals(s3.substring(s3Index));
        }
        
        if(dp[s1Index][s2Index] !=-1){
            return (dp[s1Index][s2Index] == 1) ? true: false;
        }
        int ans = 0;
        if(s3.charAt(s3Index) == s1.charAt(s1Index) && calculate(s1, s1Index+1, s2, s2Index, s3, s3Index+1) || 
          (s3.charAt(s3Index) == s2.charAt(s2Index) && calculate(s1, s1Index, s2, s2Index +1, s3, s3Index+1))){
            ans = 1;
        }
        dp[s1Index][s2Index] = ans;
        
        return dp[s1Index][s2Index] ==1 ? true: false;
    }
    
    
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length() + s2.length() != s3.length()){
            return false;
        }
        
        int n =s1.length();
        int m =s2.length();
        if(n==0){
            return s2.equals(s3);
        }
        if(m == 0){
            return s1.equals(s3);
        }
        dp = new int[n][m];
        
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i], -1);
        }
        
        return calculate(s1, 0, s2, 0, s3, 0);
        
    }
}
